# -*- coding: utf-8 -*-
"""nbamodel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16nuotcJIHY4HYPzU8vABXNSX_MJu5ltl
"""

from bs4 import BeautifulSoup
import pandas as pd

import requests

url = 'https://hoopshype.com/2015/11/05/these-are-the-ratings-of-all-players-in-nba-2k16/'
r  = requests.get(url)

data = r.text

soup = BeautifulSoup(data)
soup.prettify

res = requests.get(url)
soup = BeautifulSoup(res.content,'lxml')
table = soup.find_all('table')[0] 
df2 = pd.read_html(str(table))
print(df2[0].to_json(orient='records'))

from tabulate import tabulate
foo = tabulate(df2[0], headers='keys', tablefmt='plain') 
#print(foo)
boo = foo.split('\n')
#print(boo)
data = []
for a in boo:
  a = a.split(' ')
  a[:] = [x for x in a if x != '']
  #print(a)
  data.append(a)

data.pop(1)
new_df = pd.DataFrame(data=data)
new_df.head()
new_df = new_df.loc[::2]
new_df.dropna(axis = 0)
new_df

from google.colab import files
new_df.to_csv('2krates.csv')

url2 = 'https://raw.githubusercontent.com/UVAnog/NBAMachineLearningProj/master/Seasons_Stats%203.csv'
seasondf = pd.read_csv(url2)
years = [2014, 2015, 2016]
real_data = seasondf[(seasondf['Year'] == 2014) | (seasondf['Year'] == 2015) | (seasondf['Year'] == 2016)].sort_values(['Year','Player'])
real_data.head()
real_data['2014_rating'] = ' '
real_data['2015_rating'] = ' '
real_data['2016_rating'] = ' '
real_data

from google.colab import files
real_data.to_csv('real_data.csv')

#importing the new, cleaned csv of real player data with their manually added 2k rankings 
url = 'https://raw.githubusercontent.com/UVAnog/NBAMachineLearningProj/master/nba_playerData.csv'
nbaPlayerData = pd.read_csv(url)
nbaPlayerData

#splitting into training and testing. training will be 360, testing will be last 119 (75/25 split).
train = nbaPlayerData[:360]
test = nbaPlayerData[360:]

train.columns

#Isolating x (features) and y (output/response) for the nbaPlayerData set
#Also dropping some columns that wont really add to our predictions

nba_training_x = train.drop(['2016_rating', 'Unnamed: 0', 'Unnamed: 0.1', 'Pos', 'Year', 'Player', 'blanl', 'blank2', 'Tm'], axis = 1)
nba_training_y = train['2016_rating']

nba_training_x

#Working with some na values, going to use simple imputer with strategy mean to replace nan values with the average 
#of the average of the column its in
#have to do this for training sets, testing sets

import numpy as np
from sklearn.preprocessing import Imputer

#nba_training_x
fill_NaN = Imputer(missing_values=np.nan, strategy='mean', axis=1)
imputed_DF = pd.DataFrame(fill_NaN.fit_transform(nba_training_x))
imputed_DF.columns = nba_training_x.columns
imputed_DF.index = nba_training_x.index

nba_training_x = imputed_DF

#Doing the same for the test set
nba_test_x = test.drop(['2016_rating', 'Unnamed: 0', 'Unnamed: 0.1', 'Pos', 'Year', 'Player', 'blanl', 'blank2', 'Tm'], axis = 1)
nba_test_y = test['2016_rating']

#filling NA values of test with the average of each column like above
#nba_training_x
fill_NaN2 = Imputer(missing_values=np.nan, strategy='mean', axis=1)
imputed_DF2 = pd.DataFrame(fill_NaN.fit_transform(nba_test_x))
imputed_DF2.columns = nba_test_x.columns
imputed_DF2.index = nba_test_x.index

nba_test_x = imputed_DF2

#Building the model aka the fun part

#Model 1: Regression
from sklearn.linear_model import LogisticRegression
LogisticRegression()

#fit the model
nba_player_model = LogisticRegression().fit(nba_training_x, nba_training_y)

# Making predictions!
preds = pd.DataFrame(nba_player_model.predict(nba_test_x)) #predicting the test set - last 119 values
preds1 = pd.DataFrame(nba_player_model.predict(nba_training_x)) #predicting the second first 360 values

print(nba_test_y)

#combining the data frames with the predictions, ignoring the index so we can merge it to our original player data
numbers = pd.concat([preds1, preds], ignore_index=True)
Machine_Predictions = pd.DataFrame(columns=['Machine_Predictions'])
Machine_Predictions['Machine_Predictions'] = numbers[0]

#Machine_Predictions

nbaPlayerData['Machine_Predictions'] = Machine_Predictions['Machine_Predictions']
#nbaPlayerData

#Now we predict the teams! Going to manually calculate and grab scores for all 32 teams, using Machine Predictions, and then 2k16 predictions 
#to predict the 2016 playoffs. So a total of 64 manually calculated team scores.



nbaPlayerData.Tm.unique()

#creating a dictionary we can easily pull the teams and their data from
teams = ['OKC', 'BRK', 'MIA', 'ORL', 'MIN', 'SAS', 'BOS', 'NOP', 'POR',
       'PHI', 'HOU', 'IND', 'MIL', 'TOR', 'CHI', 'DEN', 'TOT', 'ATL',
       'CHO', 'NYK', 'LAL', 'DAL', 'WAS', 'GSW', 'PHO', 'LAC', 'SAC',
       'DET', 'UTA', 'MEM', 'CLE']

team_dataframes = {}

for Tm in teams: 
  team_dataframes[Tm] = nbaPlayerData[nbaPlayerData.Tm==Tm]

#team_dataframes



#Here we go. First set of rankings for the 2k data
print("TEAM RATINGS" + "\n")
#OKC
OKC = team_dataframes['OKC']
OKC_Rating = OKC['2016_rating']
OKC_Rating = OKC_Rating.sort_values(ascending=False).iloc[0:10].sum()
OKC_Rating 
print("OKC: ", OKC_Rating)

#BRK
BRK = team_dataframes['BRK']
BRK_Rating = BRK['2016_rating']
BRK_Rating = BRK_Rating.sort_values(ascending=False).iloc[0:10].sum()
BRK_Rating 
print("BRK: ", BRK_Rating)

#MIA
MIA = team_dataframes['MIA']
MIA_Rating = MIA['2016_rating']
MIA_Rating = MIA_Rating.sort_values(ascending=False).iloc[0:10].sum()
MIA_Rating 
print("MIA: ", MIA_Rating)

#ORL
ORL = team_dataframes['ORL']
ORL_Rating = ORL['2016_rating']
ORL_Rating = ORL_Rating.sort_values(ascending=False).iloc[0:10].sum()
ORL_Rating 
print("ORL: ", ORL_Rating)

#MIN
MIN = team_dataframes['MIN']
MIN_Rating = MIN['2016_rating']
MIN_Rating = MIN_Rating.sort_values(ascending=False).iloc[0:10].sum()
MIN_Rating 
print("MIN: ", MIN_Rating)

#SAS
SAS = team_dataframes['SAS']
SAS_Rating = SAS['2016_rating']
SAS_Rating = SAS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("SAS: ", SAS_Rating)

#BOS
BOS = team_dataframes['BOS']
BOS_Rating = BOS['2016_rating']
BOS_Rating = BOS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("BOS: ", BOS_Rating)

#NOP
NOP = team_dataframes['NOP']
NOP_Rating = NOP['2016_rating']
NOP_Rating = NOP_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("NOP: ", NOP_Rating)

#POR
POR = team_dataframes['POR']
POR_Rating = POR['2016_rating']
POR_Rating = POR_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("POR: ", POR_Rating)

#PHI
PHI = team_dataframes['PHI']
PHI_Rating = PHI['2016_rating']
PHI_Rating = PHI_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("PHI: ", PHI_Rating)

#HOU
HOU = team_dataframes['HOU']
HOU_Rating = HOU['2016_rating']
HOU_Rating = HOU_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("HOU: ", HOU_Rating)

#IND
IND = team_dataframes['IND']
IND_Rating = IND['2016_rating']
IND_Rating = IND_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("IND: ", IND_Rating)

#MIL
MIL = team_dataframes['MIL']
MIL_Rating = MIL['2016_rating']
MIL_Rating = MIL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("MIL: ", MIL_Rating)

#TOR
TOR = team_dataframes['TOR']
TOR_Rating = TOR['2016_rating']
TOR_Rating = TOR_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("TOR: ", TOR_Rating)

#CHI
CHI = team_dataframes['CHI']
CHI_Rating = CHI['2016_rating']
CHI_Rating = CHI_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("CHI: ", CHI_Rating)

#DEN
DEN = team_dataframes['DEN']
DEN_Rating = DEN['2016_rating']
DEN_Rating = DEN_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DEN: ", DEN_Rating)

#TOT
TOT = team_dataframes['TOT']
TOT_Rating = TOT['2016_rating']
TOT_Rating = TOT_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("TOT: ", TOT_Rating)

#ATL
ATL = team_dataframes['ATL']
ATL_Rating = ATL['2016_rating']
ATL_Rating = ATL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("ATL: ", ATL_Rating)

#NYK
NYK = team_dataframes['NYK']
NYK_Rating = NYK['2016_rating']
NYK_Rating = NYK_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("NYK: ", NYK_Rating)

#LAL
LAL = team_dataframes['LAL']
LAL_Rating = LAL['2016_rating']
LAL_Rating = LAL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("LAL: ", LAL_Rating)

#DAL
DAL = team_dataframes['DAL']
DAL_Rating = DAL['2016_rating']
DAL_Rating = DAL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DAL: ", DAL_Rating)

#WAS
WAS = team_dataframes['WAS']
WAS_Rating = WAS['2016_rating']
WAS_Rating = WAS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("WAS: ", WAS_Rating)

#GSW
GSW = team_dataframes['GSW']
GSW_Rating = GSW['2016_rating']
GSW_Rating = GSW_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("GSW: ", GSW_Rating)

#PHO
PHO = team_dataframes['PHO']
PHO_Rating = PHO['2016_rating']
PHO_Rating = PHO_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("PHO: ", PHO_Rating)

#LAC
LAC = team_dataframes['LAC']
LAC_Rating = LAC['2016_rating']
LAC_Rating = LAC_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("LAC: ", LAC_Rating)

#SAC
SAC = team_dataframes['SAC']
SAC_Rating = SAC['2016_rating']
SAC_Rating = SAC_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("SAC: ", SAC_Rating)

#DET
DET = team_dataframes['DET']
DET_Rating = DET['2016_rating']
DET_Rating = DET_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DET: ", DET_Rating)

#UTA
UTA = team_dataframes['UTA']
UTA_Rating = UTA['2016_rating']
UTA_Rating = UTA_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("UTA: ", UTA_Rating)

#MEM
MEM = team_dataframes['MEM']
MEM_Rating = MEM['2016_rating']
MEM_Rating = MEM_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("MEM: ", MEM_Rating)

#CLE
CLE = team_dataframes['CLE']
CLE_Rating = CLE['2016_rating']
CLE_Rating = CLE_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("CLE: ", CLE_Rating)

#Ratings for our predicted values
print("TEAM RATINGS" + "\n")
#OKC
OKC = team_dataframes['OKC']
OKC_Rating = OKC['Machine_Predictions']
OKC_Rating = OKC_Rating.sort_values(ascending=False).iloc[0:10].sum()
OKC_Rating 
print("OKC: ", OKC_Rating)

#BRK
BRK = team_dataframes['BRK']
BRK_Rating = BRK['Machine_Predictions']
BRK_Rating = BRK_Rating.sort_values(ascending=False).iloc[0:10].sum()
BRK_Rating 
print("BRK: ", BRK_Rating)

#MIA
MIA = team_dataframes['MIA']
MIA_Rating = MIA['Machine_Predictions']
MIA_Rating = MIA_Rating.sort_values(ascending=False).iloc[0:10].sum()
MIA_Rating 
print("MIA: ", MIA_Rating)

#ORL
ORL = team_dataframes['ORL']
ORL_Rating = ORL['Machine_Predictions']
ORL_Rating = ORL_Rating.sort_values(ascending=False).iloc[0:10].sum()
ORL_Rating 
print("ORL: ", ORL_Rating)

#MIN
MIN = team_dataframes['MIN']
MIN_Rating = MIN['Machine_Predictions']
MIN_Rating = MIN_Rating.sort_values(ascending=False).iloc[0:10].sum()
MIN_Rating 
print("MIN: ", MIN_Rating)

#SAS
SAS = team_dataframes['SAS']
SAS_Rating = SAS['Machine_Predictions']
SAS_Rating = SAS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("SAS: ", SAS_Rating)

#BOS
BOS = team_dataframes['BOS']
BOS_Rating = BOS['Machine_Predictions']
BOS_Rating = BOS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("BOS: ", BOS_Rating)

#NOP
NOP = team_dataframes['NOP']
NOP_Rating = NOP['Machine_Predictions']
NOP_Rating = NOP_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("NOP: ", NOP_Rating)

#POR
POR = team_dataframes['POR']
POR_Rating = POR['Machine_Predictions']
POR_Rating = POR_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("POR: ", POR_Rating)

#PHI
PHI = team_dataframes['PHI']
PHI_Rating = PHI['Machine_Predictions']
PHI_Rating = PHI_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("PHI: ", PHI_Rating)

#HOU
HOU = team_dataframes['HOU']
HOU_Rating = HOU['Machine_Predictions']
HOU_Rating = HOU_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("HOU: ", HOU_Rating)

#IND
IND = team_dataframes['IND']
IND_Rating = IND['Machine_Predictions']
IND_Rating = IND_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("IND: ", IND_Rating)

#MIL
MIL = team_dataframes['MIL']
MIL_Rating = MIL['Machine_Predictions']
MIL_Rating = MIL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("MIL: ", MIL_Rating)

#CHI
CHI = team_dataframes['CHI']
CHI_Rating = CHI['Machine_Predictions']
CHI_Rating = CHI_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("CHI: ", CHI_Rating)

#DEN
DEN = team_dataframes['DEN']
DEN_Rating = DEN['Machine_Predictions']
DEN_Rating = DEN_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DEN: ", DEN_Rating)

#TOR
TOR = team_dataframes['TOT']
TOR_Rating = TOT['Machine_Predictions']
TOR_Rating = TOR_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("TOR: ", TOR_Rating)

#ATL
ATL = team_dataframes['ATL']
ATL_Rating = ATL['Machine_Predictions']
ATL_Rating = ATL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("ATL: ", ATL_Rating)

#NYK
NYK = team_dataframes['NYK']
NYK_Rating = NYK['Machine_Predictions']
NYK_Rating = NYK_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("NYK: ", NYK_Rating)

#LAL
LAL = team_dataframes['LAL']
LAL_Rating = LAL['Machine_Predictions']
LAL_Rating = LAL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("LAL: ", LAL_Rating)

#DAL
DAL = team_dataframes['DAL']
DAL_Rating = DAL['Machine_Predictions']
DAL_Rating = DAL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DAL: ", DAL_Rating)

#WAS
WAS = team_dataframes['WAS']
WAS_Rating = WAS['Machine_Predictions']
WAS_Rating = WAS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("WAS: ", WAS_Rating)

#GSW
GSW = team_dataframes['GSW']
GSW_Rating = GSW['Machine_Predictions']
GSW_Rating = GSW_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("GSW: ", GSW_Rating)

#PHO
PHO = team_dataframes['PHO']
PHO_Rating = PHO['Machine_Predictions']
PHO_Rating = PHO_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("PHO: ", PHO_Rating)

#LAC
LAC = team_dataframes['LAC']
LAC_Rating = LAC['Machine_Predictions']
LAC_Rating = LAC_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("LAC: ", LAC_Rating)

#SAC
SAC = team_dataframes['SAC']
SAC_Rating = SAC['Machine_Predictions']
SAC_Rating = SAC_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("SAC: ", SAC_Rating)

#DET
DET = team_dataframes['DET']
DET_Rating = DET['Machine_Predictions']
DET_Rating = DET_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DET: ", DET_Rating)

#UTA
UTA = team_dataframes['UTA']
UTA_Rating = UTA['Machine_Predictions']
UTA_Rating = UTA_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("UTA: ", UTA_Rating)

#MEM
MEM = team_dataframes['MEM']
MEM_Rating = MEM['Machine_Predictions']
MEM_Rating = MEM_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("MEM: ", MEM_Rating)

#CLE
CLE = team_dataframes['CLE']
CLE_Rating = CLE['Machine_Predictions']
CLE_Rating = CLE_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("CLE: ", CLE_Rating)